comment: '''
  
  		Copyright (C) 2013 - 2014 Peter Varo
  		<http://github.com/petervaro/python>
  		Copyright (C) 2016 Evan Hubinger
  		<http://github.com/evhub/sublime-coconut>
  
  		This program is free software: you can redistribute it
  		and/or modify it under the terms of the GNU General
  		Public License as published by the Free Software
  		Foundation, either version 3 of the License, or (at your
  		option) any later version.
  
  		This program is distributed in the hope that it will be
  		useful, but WITHOUT ANY WARRANTY; without even the
  		implied warranty of MERCHANTABILITY or FITNESS FOR A
  		PARTICULAR PURPOSE. See the GNU General Public License
  		for more details.
  
  		You should have received a copy of the GNU General Public
  		License along with this program, most likely a file in
  		the root directory, called "LICENSE". If not, see
  		<http://www.gnu.org/licenses>.
  	
'''
fileTypes: [
  "coc"
  "coco"
  "coconut"
]
firstLineMatch: "^#!/.*\\bcoconut[\\d.-]*\\b"
foldingStartMarker: "^\\s*(def|class|(?<!\\\\)data)\\s+([.\\w>]+)\\s*(\\((.*)\\))?\\s*:|\\{\\s*$|\\(\\s*$|\\[\\s*$|^\\s*\"\"\"(?=.)(?!.*\"\"\")"
foldingStopMarker: "^\\s*$|^\\s*\\}|^\\s*\\]|^\\s*\\)|^\\s*\"\"\"\\s*$"
name: "Coconut"
patterns: [
  {
    include: "#comment"
  }
  {
    match: "\\b0b[01_]+"
    name: "constant.numeric.integer.binary.coconut"
  }
  {
    match: "\\b0x[\\h_]+"
    name: "constant.numeric.integer.hexadecimal.coconut"
  }
  {
    match: "\\b0o[0-7_]+"
    name: "constant.numeric.integer.octal.coconut"
  }
  {
    match: "(?<!\\.)(?<=\\W|^)\\.\\d[\\d_]*([eE][+-]?\\d[\\d_]*)?[iIjJ]?"
    name: "constant.numeric.float_and_complex.decimal.floatnumber.coconut"
  }
  {
    match: "\\d[\\d_]*\\.([\\d_]*([eE][+-]?\\d[\\d_]*)?)?[iIjJ]?(?=\\W)"
    name: "constant.numeric.float_and_complex.decimal.pointfloat.coconut"
  }
  {
    match: "(?<![\\.\\d_])\\d[\\d_]*[eE][+-]?\\d[\\d_]*[iIjJ]?"
    name: "constant.numeric.float_and_complex.decimal.exponent.coconut"
  }
  {
    match: "\\b(?<!\\.)([1-9][\\d_]*|0)[iIjJ]?"
    name: "constant.numeric.integer_and_complex.decimal.coconut"
  }
  {
    match: "\\b(global|nonlocal)\\b"
    name: "storage.modifier.declaration.coconut"
  }
  {
    match: "\\b(import|from)\\b"
    name: "keyword.control.import_and_import_from.coconut"
  }
  {
    match: "\\b(elif|else|except|finally|for|if|try|while|with|break|continue|pass|raise|return|yield|(?<!\\\\)(async|await|match|case))\\b"
    name: "keyword.control.flow_block_delimiters.coconut"
  }
  {
    match: "\\b(and|in|is|not|or)\\b"
    name: "keyword.operator.bool.logical.coconut"
  }
  {
    match: "\\b(as|assert|del)\\b"
    name: "keyword.other.coconut"
  }
  {
    match: "<=|>=|==|<|>|!="
    name: "keyword.operator.comparison.coconut"
  }
  {
    match: "\\+=|-=|\\*=|/=|//=|%=|&=|\\|=|\\^=|<<=|>>=|\\*\\*=|@=|::=|\\|>=|<\\|=|\\|\\*>=|<\\*\\|=|\\.\\.="
    name: "keyword.operator.assignment.augmented.coconut"
  }
  {
    match: "\\+|-|\\*|\\*\\*|/|//|%|<<|>>|&|\\||\\^|~|@|::|\\$|\\|>|<\\||\\|\\*>|<\\*\\||`|\\.\\."
    name: "keyword.operator.arithmetic.coconut"
  }
  {
    match: "=|->"
    name: "keyword.operator.value_and_annotation_assignment.coconut"
  }
  {
    begin: "^\\s*(class|(?<!\\\\)data)\\s+(?=[a-zA-Z_]\\w*(\\s*\\()?)"
    beginCaptures:
      "1":
        name: "storage.type.class.coconut"
    end: "(\\)?[ \\t\\r\\f\\v]*\\n|\\)?\\s*:|\\s+([\\w#\\s:]+))"
    endCaptures:
      "3":
        name: "invalid.illegal.missing_section_begin.coconut"
    name: "meta.class.coconut"
    patterns: [
      {
        include: "#class_entity_name"
      }
      {
        include: "#class_inheritance"
      }
    ]
  }
  {
    begin: "^\\s*(def)\\s+(?=[a-zA-Z_]\\w*\\s*\\()"
    beginCaptures:
      "1":
        name: "storage.type.function.coconut"
    end: "\\s*(:|=)"
    endCaptures:
      "2":
        name: "invalid.illegal.missing_section_begin.coconut"
    name: "meta.function.coconut"
    patterns: [
      {
        include: "#function_entity_name"
      }
      {
        include: "#function_arguments"
      }
      {
        include: "#function_annotation"
      }
    ]
  }
  {
    begin: "\\b(lambda)\\b"
    beginCaptures:
      "1":
        name: "storage.type.function.anonymous.coconut"
    end: ":"
    name: "meta.function.anonymous.coconut"
    patterns: [
      {
        begin: "\\s+"
        end: "(?=:)"
        patterns: [
          {
            begin: "\\b([a-zA-Z_]\\w*)\\s*(=)"
            beginCaptures:
              "1":
                name: "variable.parameter.function.coconut"
              "2":
                name: "keyword.operator.assignment.coconut"
            end: "(?=,|:)"
            patterns: [
              {
                include: "$self"
              }
            ]
          }
          {
            match: "\\b[a-zA-Z_]\\w*"
            name: "variable.parameter.function.coconut"
          }
        ]
      }
    ]
  }
  {
    match: "\\b(None|True|False|Ellipsis|NotImplemented)\\b"
    name: "constant.language.word_like.coconut"
  }
  {
    match: "(?<=\\W|^)\\.\\.\\.(?=\\W|$)"
    name: "constant.language.symbol_like.coconut"
  }
  {
    match: "\\b(def|lambda)\\b"
    name: "storage.type.function.coconut"
  }
  {
    match: "\\b(class|(?<!\\\\)data)\\b"
    name: "storage.type.class.coconut"
  }
  {
    include: "#builtin_types"
  }
  {
    include: "#builtin_functions"
  }
  {
    include: "#builtin_exceptions"
  }
  {
    include: "#magic_function_names"
  }
  {
    include: "#magic_variable_names"
  }
  {
    include: "#language_variables"
  }
  {
    begin: "\\["
    end: "\\]"
    name: "meta.structure.list.coconut"
    patterns: [
      {
        begin: "(?<=\\[|,)\\s*(?![\\],])"
        end: "\\s*(?:,|(?=\\]))"
        patterns: [
          {
            include: "$self"
          }
        ]
      }
    ]
  }
  {
    begin: "\\{"
    end: "\\}"
    name: "meta.structure.dictionary.coconut"
    patterns: [
      {
        begin: "(?<=\\{|,|^)\\s*(?![,}])"
        end: "\\s*(?:(?=\\})|:)"
        patterns: [
          {
            include: "$self"
          }
        ]
      }
      {
        begin: "(?<=:|^)\\s*"
        end: "\\s*(?:(?=\\})|,)"
        patterns: [
          {
            include: "$self"
          }
        ]
      }
    ]
  }
  {
    begin: "(?<=,|;|=|\\+|-|\\*|/|\\||:|<|>|~|%|\\^|\\\\|@|::|\\|>|<\\||\\|\\*>|<\\*\\||`|\\.\\.|\\\\)\\s*\\("
    end: "\\)"
    name: "meta.structure.group.coconut"
    patterns: [
      {
        include: "$self"
      }
    ]
  }
  {
    begin: "(?<!:|,|;|\\[|\\{|\\}|=|\\+|-|\\*|/|\\||<|>|~|%|\\^|\\\\|\\n|@|::|\\|>|<\\||\\|\\*>|<\\*\\||`|\\.\\.|\\\\)\\s*\\$?\\("
    end: "\\)"
    name: "meta.function_call.coconut"
    patterns: [
      {
        include: "#keyword_arguments"
      }
      {
        include: "$self"
      }
    ]
  }
  {
    include: "#string_quoted"
  }
]
repository:
  builtin_exceptions:
    match: "\\b((Arithmetic|Buffer|Lookup|Assertion|Attribute|EOF|FloatingPoint|Import|Index|Key|Memory|Name|NotImplemented|OS|Overflow|Reference|Runtime|Syntax|Indentation|Tab|System|Type|UnboundLocal|Unicode(Encode|Decode|Translate)?|Value|ZeroDivision|Environment|IO|VMS|Windows|BlockingIO|ChildProcess|BrokenPipe|Connection(Aborted|Refused|Reset)?|FileExists|FileNotFound|Interrupted|(Is|Not)ADirectory|Permission|ProcessLookup|Timeout)Error|(User|Deprecation|PendingDeprecation|Syntax|Runtime|Future|Import|Bytes|Resource)Warning|(Base)?Exception|(Generator|System)Exit|KeyboardInterrupt|StopIteration|Warning|MatchError)\\b"
    name: "support.type.exception.coconut"
  builtin_functions:
    match: "(?<!(?<!\\.)\\.)\\b(__import__|abs|all|any|ascii|bin|callable|(py_)?chr|compile|delattr|dir|divmod|eval|exec|(py_)?filter|format|getattr|globals|hasattr|hash|help|(py_)?hex|id|(py_)?input|isinstance|issubclass|iter|len|locals|vars|min|next|oct|ord|pow|(py_)?print|repr|round|setattr|sorted|sum|max|reduce|takewhile|dropwhile|tee|datamaker|consume|py_raw_input|py_xrange|addpattern|prepattern|recursive_iterator)\\b"
    name: "support.function.builtin.coconut"
  builtin_types:
    match: "(?<!(?<!\\.)\\.)\\b(bool|bytearray|bytes|classmethod|complex|dict|(py_)?range|tuple|enumerate|float|frozenset|(py_)?int|list|memoryview|object|(py_)?open|property|reversed|set|slice|staticmethod|(py_)?str|super|type|(py_)?map|(py_)?zip|parallel_map|count|concurrent_map)\\b"
    name: "support.type.coconut"
  class_entity_name:
    begin: "(?=[a-zA-Z_]\\w*)"
    contentName: "entity.name.type.class.coconut"
    end: "(?!\\w)"
    patterns: [
      {
        include: "#entity_name_class"
      }
    ]
  class_inheritance:
    begin: "\\("
    contentName: "meta.class.inheritance.coconut"
    end: "\\)|:"
    patterns: [
      {
        begin: "(?<=\\(|,)\\s*"
        contentName: "entity.other.inherited-class.coconut"
        end: "\\s*(?:,|(?=\\)))"
        endCaptures:
          "1":
            name: "punctuation.separator.inheritance.coconut"
        patterns: [
          {
            include: "$self"
          }
        ]
      }
    ]
  comment:
    match: "#.*$\\n?"
    name: "comment.line.hashmark.coconut"
  constant_placeholder:
    match: "%(\\(\\w+\\))?#?0?-?[ ]?\\+?(\\d*|\\*)(\\.(\\d*|\\*))?[hlL]?[diouxXeEfFgGcrs%]"
    name: "string.interpolated.placeholder.coconut"
  entity_name_class:
    patterns: [
      {
        include: "#illegal_names"
      }
      {
        include: "#generic_names"
      }
    ]
  entity_name_function:
    patterns: [
      {
        include: "#magic_function_names"
      }
      {
        include: "#illegal_names"
      }
      {
        include: "#generic_names"
      }
    ]
  escaped_characters:
    match: "\\\\(x\\h{2}|[0-7]{3}|\\n|\\\"|\\'|a|b|f|n|r|t|v|\\\\)"
    name: "constant.character.escaped.special.coconut"
  escaped_unicode_characters:
    match: "\\\\(u\\h{4}|U\\h{8}|N\\{[a-zA-Z\\s]+\\})"
    name: "constant.character.escaped.coconut"
  format_mini_language:
    patterns: [
      {
        match: "\\{\\}"
        name: "constant.other.placeholder.format.coconut"
      }
    ]
  function_annotation:
    begin: "(?<=\\))\\s*(->)\\s*"
    beginCaptures:
      "1":
        name: "keyword.operator.annotation.assignment.coconut"
    end: "(?=\\s*[:=])"
    patterns: [
      {
        include: "$self"
      }
    ]
  function_arguments:
    begin: "\\("
    end: "(?=\\))"
    patterns: [
      {
        include: "#comment"
      }
      {
        begin: "\\b([a-zA-Z_]\\w*)\\s*(=)"
        beginCaptures:
          "1":
            name: "variable.parameter.function.coconut"
          "2":
            name: "keyword.operator.assignment.coconut"
        end: "(?=,|[\\n)])"
        patterns: [
          {
            begin: "(?<=(=))\\s*"
            beginCaptures:
              "1":
                name: "keyword.operator.assignment.coconut"
            end: "(?=,|[\\n)])"
            patterns: [
              {
                include: "$self"
              }
            ]
          }
          {
            begin: "(?<=:)\\s*"
            end: "(?=,|(=)|[\\n)])"
            endCaptures:
              "1":
                name: "keyword.operator.assignment.coconut"
            patterns: [
              {
                include: "$self"
              }
            ]
          }
        ]
      }
      {
        begin: "\\b([a-zA-Z_]\\w*)\\s*"
        beginCaptures:
          "1":
            name: "variable.parameter.function.coconut"
        end: "(?=,|[\\n)])"
        patterns: [
          {
            begin: "(?<=:)\\s*"
            end: "(?=,|[\\n)])"
            patterns: [
              {
                include: "$self"
              }
            ]
          }
        ]
      }
    ]
  function_entity_name:
    begin: "(?=[a-zA-Z_]\\w*)"
    contentName: "entity.name.function.coconut"
    end: "(?!\\w)"
    patterns: [
      {
        include: "#entity_name_function"
      }
    ]
  generic_names:
    match: "[a-zA-Z_]\\w*"
  illegal_names:
    match: "\\b(and|as|assert|break|class|continue|def|del|elif|else|except|finally|for|from|global|if|import|in|is|lambda|nonlocal|not|or|pass|raise|return|try|while|with|yield|_coconut\\w*)\\b"
    name: "invalid.illegal_names.name.coconut"
  keyword_arguments:
    begin: "\\b([a-zA-Z_]\\w*)\\s*(=)(?!=)"
    beginCaptures:
      "1":
        name: "variable.parameter.function.coconut"
      "2":
        name: "keyword.operator.assignment.coconut"
    end: "(?=,|[\\n)])"
    patterns: [
      {
        include: "$self"
      }
    ]
  language_variables:
    match: "\\b(self|cls)\\b"
    name: "variable.language.coconut"
  magic_function_names:
    match: "\\b__(abs|add|and|bool|bytes|call|ceil|complex|contains|copy|deepcopy|del|delattr|delete|delitem|dir|div|divmod|enter|eq|exit|float|floor|floordiv|format|ge|get|getattr|getattribute|getinitargs|getitem|getnewargs|getstate|gt|hash|hex|iadd|iand|idiv|ifloordiv|ilshift|imul|index|init|instancecheck|int|invert|ior|ipow|irshift|isub|iter|itruediv|ixor|le|len|lshift|lt|metaclass|missing|mod|mul|ne|neg|new|next|(py_)?oct|or|pos|pow|prepare|radd|rand|rdiv|rdivmod|reduce|reduce_ex|repr|reversed|rfloordiv|rlshift|rmod|rmul|ror|round|rpow|rrshift|rshift|rsub|rtruediv|rxor|set|setattr|setitem|setstate|sizeof|str|sub|subclasscheck|subclasshook|truediv|trunc|unicode|weakref|xor)__\\b"
    name: "support.function.magic.coconut"
  magic_variable_names:
    match: "\\b__(all|annotations|bases|builtins|class|debug|dict|doc|file|members|metaclass|mro|name|qualname|slots|weakref)__\\b"
    name: "support.variable.magic.coconut"
  regular_expressions:
    patterns: [
      {
        match: "(?<=\\()\\?(=|!|<=|<!|:|P<[a-zA-Z_]\\w*?>|\\(([1-9]\\d?|[a-zA-Z_]\\w*)\\))"
        name: "constant.character.escape.coconut"
      }
      {
        captures:
          "1":
            name: "constant.character.escape.coconut"
        match: "\\((\\?P=)([a-zA-Z_]\\w*)\\)"
        name: "keyword.other.group_reference_name.regex.coconut"
      }
      {
        match: "\\\\[bBAZzG]|\\^|\\$"
        name: "keyword.control.anchor.regex.coconut"
      }
      {
        match: "\\\\[1-9]\\d?"
        name: "keyword.other.group_reference_order.regex.coconut"
      }
      {
        match: "[?+*][?+]?|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??"
        name: "keyword.operator.quantifier.regex.coconut"
      }
      {
        match: "\\|"
        name: "keyword.operator.or.regex.coconut"
      }
      {
        begin: "\\(\\?#"
        end: "\\)"
        name: "comment.block.regex.coconut"
      }
      {
        match: "\\(\\?[aiLmsux]+\\)"
        name: "keyword.other.option_toggle.regex.coconut"
      }
      {
        include: "#regular_expressions_escaped_characters"
      }
      {
        include: "#regular_expressions_character_classes"
      }
      {
        match: "[()]"
        name: "keyword.operator.group.regex.coconut"
      }
    ]
  regular_expressions_character_classes:
    patterns: [
      {
        match: "\\\\[wWsSdD]|\\."
        name: "constant.character.character_class.regex.coconut"
      }
      {
        begin: "\\[(\\^)?(\\](?=.*\\]))?"
        beginCaptures:
          "1":
            name: "keyword.operator.negation.regex.coconut"
        end: "\\]"
        name: "constant.other.character_class.set.regex.coconut"
        patterns: [
          {
            match: "\\[|\\\\\\\\|\\\\\\]"
            name: "constant.character.escaped.special.regex.except.coconut"
          }
          {
            include: "#regular_expressions_character_classes"
          }
          {
            include: "#regular_expressions_escaped_characters"
          }
        ]
      }
    ]
  regular_expressions_escaped_characters:
    match: "\\\\(\\\\|\\?|\\.|\\*|\\+|\\{|\\}|\\||\\(|\\)|\\[|\\]|\\^|\\$)"
    name: "constant.character.escaped.special.regex.coconut"
  string_patterns:
    patterns: [
      {
        include: "#constant_placeholder"
      }
      {
        include: "#escaped_characters"
      }
      {
        include: "#escaped_unicode_characters"
      }
    ]
  string_quoted:
    patterns: [
      {
        begin: "([bBuUfF]?)'''"
        beginCaptures:
          "1":
            name: "storage.type.string.prefix.coconut"
        end: "'''"
        name: "string.quoted.single.block.coconut"
        patterns: [
          {
            include: "#string_patterns"
          }
        ]
      }
      {
        begin: "([rR][bB]|[bB][rR]|[rR]|[rR][fF]|[fF][rR])'''"
        beginCaptures:
          "1":
            name: "storage.type.string.prefix.coconut"
        end: "'''"
        name: "string.quoted.single.block.coconut"
        patterns: [
          {
            include: "#string_patterns"
          }
          {
            include: "#regular_expressions"
          }
          {
            include: "#comment"
          }
        ]
      }
      {
        begin: "([bBuUfF]?)'"
        beginCaptures:
          "1":
            name: "storage.type.string.prefix.coconut"
        end: "'|(\\n)"
        endCaptures:
          "1":
            name: "invalid.illegal.unclosed_string.coconut"
        name: "string.quoted.single.line.coconut"
        patterns: [
          {
            include: "#string_patterns"
          }
        ]
      }
      {
        begin: "([rR][bB]|[bB][rR]|[rR]|[rR][fF]|[fF][rR])'"
        beginCaptures:
          "1":
            name: "storage.type.string.prefix.coconut"
        end: "'|(\\n)"
        endCaptures:
          "1":
            name: "invalid.illegal.unclosed_string.coconut"
        name: "string.quoted.single.line.coconut"
        patterns: [
          {
            include: "#string_patterns"
          }
          {
            include: "#regular_expressions"
          }
        ]
      }
      {
        begin: "([bBuUfF]?)\"\"\""
        beginCaptures:
          "1":
            name: "storage.type.string.prefix.coconut"
        end: "\"\"\""
        name: "string.quoted.double.block.coconut"
        patterns: [
          {
            include: "#string_patterns"
          }
        ]
      }
      {
        begin: "([rR][bB]|[bB][rR]|[rR]|[rR][fF]|[fF][rR])\"\"\""
        beginCaptures:
          "1":
            name: "storage.type.string.prefix.coconut"
        end: "\"\"\""
        name: "string.quoted.double.block.coconut"
        patterns: [
          {
            include: "#string_patterns"
          }
          {
            include: "#regular_expressions"
          }
          {
            include: "#comment"
          }
        ]
      }
      {
        begin: "([bBuUfF]?)\""
        beginCaptures:
          "1":
            name: "storage.type.string.prefix.coconut"
        end: "\"|(\\n)"
        endCaptures:
          "1":
            name: "invalid.illegal.unclosed_string.coconut"
        name: "string.quoted.double.line.coconut"
        patterns: [
          {
            include: "#string_patterns"
          }
        ]
      }
      {
        begin: "([rR][bB]|[bB][rR]|[rR]|[rR][fF]|[fF][rR])\""
        beginCaptures:
          "1":
            name: "storage.type.string.prefix.coconut"
        end: "\"|(\\n)"
        endCaptures:
          "1":
            name: "invalid.illegal.unclosed_string.coconut"
        name: "string.quoted.double.line.coconut"
        patterns: [
          {
            include: "#string_patterns"
          }
          {
            include: "#regular_expressions"
          }
        ]
      }
    ]
scopeName: "source.coconut"
